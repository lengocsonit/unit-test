// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Composition /> should show error when entered 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Composer>
    <div>
      <WithStyles(ForwardRef(CircularProgress))
        size={24}
      >
        <ForwardRef(CircularProgress)
          classes={
            Object {
              "circle": "MuiCircularProgress-circle",
              "circleDeterminate": "MuiCircularProgress-circleDeterminate",
              "circleDisableShrink": "MuiCircularProgress-circleDisableShrink",
              "circleIndeterminate": "MuiCircularProgress-circleIndeterminate",
              "circleStatic": "MuiCircularProgress-circleStatic",
              "colorPrimary": "MuiCircularProgress-colorPrimary",
              "colorSecondary": "MuiCircularProgress-colorSecondary",
              "determinate": "MuiCircularProgress-determinate",
              "indeterminate": "MuiCircularProgress-indeterminate",
              "root": "MuiCircularProgress-root",
              "static": "MuiCircularProgress-static",
              "svg": "MuiCircularProgress-svg",
            }
          }
          size={24}
        >
          <div
            className="MuiCircularProgress-root MuiCircularProgress-colorPrimary MuiCircularProgress-indeterminate"
            role="progressbar"
            style={
              Object {
                "height": 24,
                "width": 24,
              }
            }
          >
            <svg
              className="MuiCircularProgress-svg"
              viewBox="22 22 44 44"
            >
              <circle
                className="MuiCircularProgress-circle MuiCircularProgress-circleIndeterminate"
                cx={44}
                cy={44}
                fill="none"
                r={20.2}
                strokeWidth={3.6}
                style={Object {}}
              />
            </svg>
          </div>
        </ForwardRef(CircularProgress)>
      </WithStyles(ForwardRef(CircularProgress))>
      <WithStyles(ForwardRef(TextField))
        id="standard-basic"
        label="Standard"
        onChange={[Function]}
        value=""
      >
        <ForwardRef(TextField)
          classes={
            Object {
              "root": "MuiTextField-root",
            }
          }
          id="standard-basic"
          label="Standard"
          onChange={[Function]}
          value=""
        >
          <WithStyles(ForwardRef(FormControl))
            className="MuiTextField-root"
            color="primary"
            disabled={false}
            error={false}
            fullWidth={false}
            required={false}
            variant="standard"
          >
            <ForwardRef(FormControl)
              className="MuiTextField-root"
              classes={
                Object {
                  "fullWidth": "MuiFormControl-fullWidth",
                  "marginDense": "MuiFormControl-marginDense",
                  "marginNormal": "MuiFormControl-marginNormal",
                  "root": "MuiFormControl-root",
                }
              }
              color="primary"
              disabled={false}
              error={false}
              fullWidth={false}
              required={false}
              variant="standard"
            >
              <div
                className="MuiFormControl-root MuiTextField-root"
              >
                <WithStyles(ForwardRef(InputLabel))
                  htmlFor="standard-basic"
                  id="standard-basic-label"
                >
                  <ForwardRef(InputLabel)
                    classes={
                      Object {
                        "animated": "MuiInputLabel-animated",
                        "asterisk": "MuiInputLabel-asterisk",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "filled": "MuiInputLabel-filled",
                        "focused": "Mui-focused",
                        "formControl": "MuiInputLabel-formControl",
                        "marginDense": "MuiInputLabel-marginDense",
                        "outlined": "MuiInputLabel-outlined",
                        "required": "Mui-required",
                        "root": "MuiInputLabel-root",
                        "shrink": "MuiInputLabel-shrink",
                      }
                    }
                    htmlFor="standard-basic"
                    id="standard-basic-label"
                  >
                    <WithStyles(ForwardRef(FormLabel))
                      className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                      classes={
                        Object {
                          "asterisk": "MuiInputLabel-asterisk",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "required": "Mui-required",
                        }
                      }
                      data-shrink={false}
                      htmlFor="standard-basic"
                      id="standard-basic-label"
                    >
                      <ForwardRef(FormLabel)
                        className="MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                        classes={
                          Object {
                            "asterisk": "MuiFormLabel-asterisk MuiInputLabel-asterisk",
                            "colorSecondary": "MuiFormLabel-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "filled": "MuiFormLabel-filled",
                            "focused": "Mui-focused Mui-focused",
                            "required": "Mui-required Mui-required",
                            "root": "MuiFormLabel-root",
                          }
                        }
                        data-shrink={false}
                        htmlFor="standard-basic"
                        id="standard-basic-label"
                      >
                        <label
                          className="MuiFormLabel-root MuiInputLabel-root MuiInputLabel-formControl MuiInputLabel-animated"
                          data-shrink={false}
                          htmlFor="standard-basic"
                          id="standard-basic-label"
                        >
                          Standard
                        </label>
                      </ForwardRef(FormLabel)>
                    </WithStyles(ForwardRef(FormLabel))>
                  </ForwardRef(InputLabel)>
                </WithStyles(ForwardRef(InputLabel))>
                <WithStyles(ForwardRef(Input))
                  autoFocus={false}
                  fullWidth={false}
                  id="standard-basic"
                  multiline={false}
                  onChange={[Function]}
                  value=""
                >
                  <ForwardRef(Input)
                    autoFocus={false}
                    classes={
                      Object {
                        "colorSecondary": "MuiInput-colorSecondary",
                        "disabled": "Mui-disabled",
                        "error": "Mui-error",
                        "focused": "Mui-focused",
                        "formControl": "MuiInput-formControl",
                        "fullWidth": "MuiInput-fullWidth",
                        "input": "MuiInput-input",
                        "inputMarginDense": "MuiInput-inputMarginDense",
                        "inputMultiline": "MuiInput-inputMultiline",
                        "inputTypeSearch": "MuiInput-inputTypeSearch",
                        "marginDense": "MuiInput-marginDense",
                        "multiline": "MuiInput-multiline",
                        "root": "MuiInput-root",
                        "underline": "MuiInput-underline",
                      }
                    }
                    fullWidth={false}
                    id="standard-basic"
                    multiline={false}
                    onChange={[Function]}
                    value=""
                  >
                    <WithStyles(ForwardRef(InputBase))
                      autoFocus={false}
                      classes={
                        Object {
                          "colorSecondary": "MuiInput-colorSecondary",
                          "disabled": "Mui-disabled",
                          "error": "Mui-error",
                          "focused": "Mui-focused",
                          "formControl": "MuiInput-formControl",
                          "fullWidth": "MuiInput-fullWidth",
                          "input": "MuiInput-input",
                          "inputMarginDense": "MuiInput-inputMarginDense",
                          "inputMultiline": "MuiInput-inputMultiline",
                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                          "marginDense": "MuiInput-marginDense",
                          "multiline": "MuiInput-multiline",
                          "root": "MuiInput-root MuiInput-underline",
                          "underline": null,
                        }
                      }
                      fullWidth={false}
                      id="standard-basic"
                      inputComponent="input"
                      multiline={false}
                      onChange={[Function]}
                      type="text"
                      value=""
                    >
                      <ForwardRef(InputBase)
                        autoFocus={false}
                        classes={
                          Object {
                            "adornedEnd": "MuiInputBase-adornedEnd",
                            "adornedStart": "MuiInputBase-adornedStart",
                            "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                            "disabled": "Mui-disabled Mui-disabled",
                            "error": "Mui-error Mui-error",
                            "focused": "Mui-focused Mui-focused",
                            "formControl": "MuiInputBase-formControl MuiInput-formControl",
                            "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                            "input": "MuiInputBase-input MuiInput-input",
                            "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                            "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                            "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                            "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                            "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                            "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                            "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                            "multiline": "MuiInputBase-multiline MuiInput-multiline",
                            "root": "MuiInputBase-root MuiInput-root MuiInput-underline",
                          }
                        }
                        fullWidth={false}
                        id="standard-basic"
                        inputComponent="input"
                        multiline={false}
                        onChange={[Function]}
                        type="text"
                        value=""
                      >
                        <div
                          className="MuiInputBase-root MuiInput-root MuiInput-underline MuiInputBase-formControl MuiInput-formControl"
                          onClick={[Function]}
                        >
                          <input
                            aria-invalid={false}
                            autoFocus={false}
                            className="MuiInputBase-input MuiInput-input"
                            disabled={false}
                            id="standard-basic"
                            onAnimationStart={[Function]}
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            type="text"
                            value=""
                          />
                        </div>
                      </ForwardRef(InputBase)>
                    </WithStyles(ForwardRef(InputBase))>
                  </ForwardRef(Input)>
                </WithStyles(ForwardRef(Input))>
              </div>
            </ForwardRef(FormControl)>
          </WithStyles(ForwardRef(FormControl))>
        </ForwardRef(TextField)>
      </WithStyles(ForwardRef(TextField))>
    </div>
  </Composer>
</Provider>
`;
